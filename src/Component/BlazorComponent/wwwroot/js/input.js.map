{"version":3,"file":"input.js","sources":["../../../BlazorComponent.Web/src/events/EventType.ts","../../../BlazorComponent.Web/src/input.ts"],"sourcesContent":["// see https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/Events/EventTypes.ts\r\n// updated at 2022/08/31\r\n\r\nexport function parseMouseEvent(event: MouseEvent): Blazor.MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  } as Blazor.MouseEventArgs;\r\n}\r\n\r\nexport function parseTouchEvent(event: TouchEvent): Blazor.TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): Blazor.TouchPoint[] {\r\n  const touches: Blazor.TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nexport function parseChangeEvent(event: Event): Blazor.ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter((option) => option.selected)\r\n      .map((option) => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element[\"checked\"] : element[\"value\"];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute(\"type\")!) !== -1;\r\n}\r\n\r\nconst timeBasedInputs = [\"date\", \"datetime-local\", \"month\", \"time\", \"week\"];\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case \"date\":\r\n    case \"month\":\r\n      return value;\r\n    case \"datetime-local\":\r\n      return value.length === 16 ? value + \":00\" : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case \"time\":\r\n      return value.length === 5 ? value + \":00\" : value; // Convert hh:mm to hh:mm:00\r\n    case \"week\":\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return (\r\n    element instanceof HTMLSelectElement && element.type === \"select-multiple\"\r\n  );\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return (\r\n    !!element &&\r\n    element.tagName === \"INPUT\" &&\r\n    element.getAttribute(\"type\") === \"checkbox\"\r\n  );\r\n}\r\n","import { parseChangeEvent } from \"./events/EventType\";\n\nfunction registerInputEvents(\n  element: Element,\n  onInput: DotNet.DotNetObject,\n  debounce: number\n) {\n  if (!(element && element instanceof HTMLInputElement)) return;\n\n  let compositionInputting = false;\n\n  let timeout;\n  const listener = function (args: any) {\n    if (compositionInputting) return;\n\n    var changeEventArgs = parseChangeEvent(args);\n\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      console.log(\n        \"invoke debounce ~~~\",\n        args.target.value,\n        args.target.validity,\n        changeEventArgs.value\n      );\n      onInput.invokeMethodAsync(\"Invoke\", changeEventArgs);\n    }, debounce);\n  };\n\n  console.log(\"element\", element);\n\n  element.addEventListener(\n    \"compositionstart\",\n    (_) => (compositionInputting = true)\n  );\n  element.addEventListener(\n    \"compositionend\",\n    (_) => (compositionInputting = false)\n  );\n  element.addEventListener(\"input\", listener);\n}\n\nfunction setValue(element: HTMLInputElement, value: any) {\n  console.log(\"setValue\", element, value);\n  element.value = value;\n}\n\nexport { registerInputEvents, setValue };\n"],"names":["parseChangeEvent","event","element","target","timeBasedInputs","indexOf","getAttribute","isTimeBasedInput","normalizedValue","value","type","length","Error","normalizeTimeBasedValue","HTMLSelectElement","isMultipleSelectInput","selectElement","Array","from","options","filter","option","selected","map","targetIsCheckbox","tagName","isCheckbox","registerInputEvents","onInput","debounce","HTMLInputElement","timeout","compositionInputting","console","log","addEventListener","_","args","changeEventArgs","clearTimeout","setTimeout","validity","invokeMethodAsync","setValue"],"mappings":"AAwDM,SAAUA,EAAiBC,GAC/B,MAAMC,EAAUD,EAAME,OACtB,GAgBF,SAA0BD,GACxB,OAAmE,IAA5DE,EAAgBC,QAAQH,EAAQI,aAAa,QACtD,CAlBMC,CAAiBL,GAAU,CAC7B,MAAMM,EAqBV,SAAiCN,GAC/B,MAAMO,EAAQP,EAAQO,MAChBC,EAAOR,EAAQQ,KACrB,OAAQA,GACN,IAAK,OACL,IAAK,QAML,IAAK,OAEH,OAAOD,EANT,IAAK,iBACH,OAAwB,KAAjBA,EAAME,OAAgBF,EAAQ,MAAQA,EAC/C,IAAK,OACH,OAAwB,IAAjBA,EAAME,OAAeF,EAAQ,MAAQA,EAMhD,MAAM,IAAIG,MAAM,yBAAyBF,MAC3C,CAtC4BG,CAAwBX,GAChD,MAAO,CAAEO,MAAOD,EACjB,CAAM,GAsCT,SAA+BN,GAC7B,OACEA,aAAmBY,mBAAsC,oBAAjBZ,EAAQQ,IAEpD,CA1CaK,CAAsBb,GAAU,CACzC,MAAMc,EAAgBd,EAItB,MAAO,CAAEO,MAHcQ,MAAMC,KAAKF,EAAcG,SAC7CC,QAAQC,GAAWA,EAAOC,WAC1BC,KAAKF,GAAWA,EAAOZ,QAE3B,CAAM,CACL,MAAMe,EAqCV,SAAoBtB,GAClB,QACIA,GACkB,UAApBA,EAAQuB,SACyB,aAAjCvB,EAAQI,aAAa,OAEzB,CA3C6BoB,CAAWxB,GAEpC,MAAO,CAAEO,MADQe,IAAqBtB,EAAiB,QAAIA,EAAe,MAE3E,CACH,CAMA,MAAME,EAAkB,CAAC,OAAQ,iBAAkB,QAAS,OAAQ,QC5EpE,SAASuB,EACPzB,EACA0B,EACAC,GAEA,KAAM3B,GAAWA,aAAmB4B,kBAAmB,OAEvD,IAEIC,EAFAC,GAAuB,EAoB3BC,QAAQC,IAAI,UAAWhC,GAEvBA,EAAQiC,iBACN,oBACCC,GAAOJ,GAAuB,IAEjC9B,EAAQiC,iBACN,kBACCC,GAAOJ,GAAuB,IAEjC9B,EAAQiC,iBAAiB,SA3BR,SAAUE,GACzB,IAAIL,EAAJ,CAEA,IAAIM,EAAkBtC,EAAiBqC,GAEvCE,aAAaR,GACbA,EAAUS,YAAW,KACnBP,QAAQC,IACN,sBACAG,EAAKlC,OAAOM,MACZ4B,EAAKlC,OAAOsC,SACZH,EAAgB7B,OAElBmB,EAAQc,kBAAkB,SAAUJ,EAAgB,GACnDT,EAb8B,CAcnC,GAaF,CAEA,SAASc,EAASzC,EAA2BO,GAC3CwB,QAAQC,IAAI,WAAYhC,EAASO,GACjCP,EAAQO,MAAQA,CAClB"}