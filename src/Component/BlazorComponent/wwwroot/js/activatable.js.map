{"version":3,"file":"activatable.js","sources":["../../../BlazorComponent.Web/src/mixins/activatable/index.ts","../../../BlazorComponent.Web/src/mixins/delayable/index.ts","../../../BlazorComponent.Web/src/events/EventType.ts"],"sourcesContent":["import { parseMouseEvent } from \"../../events/EventType\";\r\nimport { getElementSelector } from \"../../utils/helper\";\r\nimport Delayable from \"../delayable\";\r\n\r\ntype Listeners = Record<\r\n  string,\r\n  (e: MouseEvent & KeyboardEvent & FocusEvent) => void\r\n>;\r\n\r\nclass Activatable extends Delayable {\r\n  activator?: HTMLElement;\r\n  popupElement: HTMLElement;\r\n  disabled: boolean;\r\n  openOnClick: boolean;\r\n  openOnHover: boolean;\r\n  openOnFocus: boolean;\r\n\r\n  closeOnOutsideClick: boolean;\r\n  closeOnContentClick: boolean;\r\n\r\n  isActive: boolean;\r\n  activatorListeners: Listeners;\r\n  popupListeners: Listeners;\r\n\r\n  constructor(\r\n    activatorSelector: string,\r\n    disabled: boolean,\r\n    openOnClick: boolean,\r\n    openOnHover: boolean,\r\n    openOnFocus: boolean,\r\n    openDelay: number,\r\n    closeDelay: number,\r\n    dotNetHelper: DotNet.DotNetObject\r\n  ) {\r\n    super(openDelay, closeDelay, dotNetHelper);\r\n\r\n    const activator = document.querySelector(activatorSelector);\r\n    if (activator) {\r\n      this.activator = activator as HTMLElement;\r\n    }\r\n\r\n    this.disabled = disabled;\r\n    this.openOnClick = openOnClick;\r\n    this.openOnHover = openOnHover;\r\n    this.openOnFocus = openOnFocus;\r\n    this.dotNetHelper = dotNetHelper;\r\n  }\r\n\r\n  //#region activators\r\n\r\n  resetActivator(selector: string) {\r\n    const activator = document.querySelector(selector);\r\n    if (activator) {\r\n      this.activator = activator as HTMLElement;\r\n    }\r\n\r\n    this.resetActivatorEvents(\r\n      this.disabled,\r\n      this.openOnHover,\r\n      this.openOnFocus\r\n    );\r\n  }\r\n\r\n  addActivatorEvents() {\r\n    if (!this.activator || this.disabled) return;\r\n\r\n    this.activatorListeners = this.genActivatorListeners();\r\n    const keys = Object.keys(this.activatorListeners);\r\n\r\n    for (const key of keys) {\r\n      this.activator.addEventListener(key, this.activatorListeners[key] as any);\r\n    }\r\n  }\r\n\r\n  genActivatorListeners() {\r\n    if (this.disabled) return {};\r\n\r\n    const listeners: Listeners = {};\r\n\r\n    if (this.openOnHover) {\r\n      listeners.mouseenter = (e: MouseEvent) => {\r\n        this.runDelay(\"open\");\r\n      };\r\n      listeners.mouseleave = (e: MouseEvent) => {\r\n        this.runDelay(\"close\");\r\n      };\r\n    } else if (this.openOnClick) {\r\n      listeners.click = (e: MouseEvent) => {\r\n        if (this.activator) this.activator.focus();\r\n\r\n        e.stopPropagation();\r\n\r\n        this.dotNetHelper.invokeMethodAsync(\"OnClick\", parseMouseEvent(e));\r\n\r\n        this.setActive(!this.isActive);\r\n      };\r\n    }\r\n\r\n    if (this.openOnFocus) {\r\n      listeners.focus = (e: FocusEvent) => {\r\n        e.stopPropagation();\r\n\r\n        this.runDelay(\"open\");\r\n      };\r\n\r\n      listeners.blur = (e: FocusEvent) => {\r\n        this.runDelay(\"close\");\r\n      };\r\n    }\r\n\r\n    return listeners;\r\n  }\r\n\r\n  removeActivatorEvents() {\r\n    if (!this.activator) return;\r\n\r\n    const keys = Object.keys(this.activatorListeners);\r\n\r\n    for (const key of keys) {\r\n      this.activator.removeEventListener(key, this.activatorListeners[key]);\r\n    }\r\n\r\n    this.activatorListeners = {};\r\n  }\r\n\r\n  resetActivatorEvents(\r\n    disabled: boolean,\r\n    openOnHover: boolean,\r\n    openOnFocus: boolean\r\n  ) {\r\n    this.disabled = disabled;\r\n    this.openOnHover = openOnHover;\r\n    this.openOnFocus = openOnFocus;\r\n\r\n    this.removeActivatorEvents();\r\n    this.addActivatorEvents();\r\n  }\r\n\r\n  runDelaying(val: boolean) {\r\n    this.runDelay(val ? \"open\" : \"close\");\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region popups\r\n\r\n  registerPopup(popupSelector: string, closeOnContentClick: boolean) {\r\n    const popup = document.querySelector(popupSelector);\r\n    if (!popup) {\r\n      console.error(\"popup not exists\");\r\n      return;\r\n    }\r\n\r\n    this.popupElement = popup as HTMLElement;\r\n    this.closeOnContentClick = closeOnContentClick;\r\n\r\n    this.addPopupEvents();\r\n  }\r\n\r\n  addPopupEvents() {\r\n    if (!this.popupElement || this.disabled) return;\r\n\r\n    this.popupListeners = this.genPopupListeners();\r\n    const keys = Object.keys(this.popupListeners);\r\n\r\n    for (const key of keys) {\r\n      this.popupElement.addEventListener(key, this.popupListeners[key] as any);\r\n    }\r\n  }\r\n\r\n  removePopupEvents() {\r\n    if (!this.popupElement) return;\r\n\r\n    const keys = Object.keys(this.popupListeners);\r\n\r\n    for (const key of keys) {\r\n      this.popupElement.removeEventListener(key, this.popupListeners[key]);\r\n    }\r\n\r\n    this.popupListeners = {};\r\n  }\r\n\r\n  genPopupListeners() {\r\n    if (this.disabled) return;\r\n\r\n    const listeners: Listeners = {};\r\n\r\n    if (!this.disabled && this.openOnHover) {\r\n      listeners.mouseenter = (e) => {\r\n        // this.setActive(true);\r\n        this.runDelay(\"open\");\r\n      };\r\n\r\n      listeners.mouseleave = (e) => {\r\n        // this.setActive(false);\r\n        this.runDelay(\"close\");\r\n      };\r\n    }\r\n\r\n    if (this.closeOnContentClick) {\r\n      listeners.click = (e) => {\r\n        this.setActive(false);\r\n      };\r\n    }\r\n\r\n    return listeners;\r\n  }\r\n\r\n  resetPopupEvents(closeOnContentClick: boolean) {\r\n    this.closeOnContentClick = closeOnContentClick;\r\n\r\n    this.removePopupEvents();\r\n    this.addPopupEvents();\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\nfunction init(\r\n  activatorSelector: string,\r\n  disabled: boolean,\r\n  openOnClick: boolean,\r\n  openOnHover: boolean,\r\n  openOnFocus: boolean,\r\n  openDelay: number,\r\n  closeDelay: number,\r\n  dotNetHelper: DotNet.DotNetObject\r\n) {\r\n  var instance = new Activatable(\r\n    activatorSelector,\r\n    disabled,\r\n    openOnClick,\r\n    openOnHover,\r\n    openOnFocus,\r\n    openDelay,\r\n    closeDelay,\r\n    dotNetHelper\r\n  );\r\n\r\n  instance.addActivatorEvents();\r\n\r\n  return instance;\r\n}\r\n\r\nexport { init };\r\n","export default class Delayable {\n  openDelay: number;\n  closeDelay: number;\n  dotNetHelper: DotNet.DotNetObject;\n\n  openTimeout;\n  closeTimeout;\n  isActive: boolean;\n\n  constructor(\n    openDelay: number,\n    closeDelay: number,\n    dotNetHelper: DotNet.DotNetObject\n  ) {\n    this.openDelay = openDelay;\n    this.closeDelay = closeDelay;\n    this.dotNetHelper = dotNetHelper;\n  }\n\n  clearDelay() {\n    clearTimeout(this.openTimeout);\n    clearTimeout(this.closeTimeout);\n  }\n\n  runDelay(type: \"open\" | \"close\", cb?: () => void) {\n    this.clearDelay();\n\n    const delay = parseInt((this as any)[`${type}Delay`], 10);\n\n    (this as any)[`${type}Timeout`] = setTimeout(\n      cb ||\n        (() => {\n          const isActive = { open: true, close: false }[type];\n          this.setActive(isActive);\n        }),\n      delay\n    );\n  }\n\n  setActive(active: boolean) {\n    if (this.isActive == active) {\n      return;\n    }\n\n    this.isActive = active;\n    this.dotNetHelper.invokeMethodAsync(\"SetActive\", this.isActive);\n  }\n}\n","// see https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/Events/EventTypes.ts\r\n// updated at 2022/08/31\r\n\r\nexport function parseMouseEvent(event: MouseEvent): Blazor.MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  } as Blazor.MouseEventArgs;\r\n}\r\n\r\nexport function parseTouchEvent(event: TouchEvent): Blazor.TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): Blazor.TouchPoint[] {\r\n  const touches: Blazor.TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nexport function parseChangeEvent(event: Event): Blazor.ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter((option) => option.selected)\r\n      .map((option) => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element[\"checked\"] : element[\"value\"];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute(\"type\")!) !== -1;\r\n}\r\n\r\nconst timeBasedInputs = [\"date\", \"datetime-local\", \"month\", \"time\", \"week\"];\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case \"date\":\r\n    case \"month\":\r\n      return value;\r\n    case \"datetime-local\":\r\n      return value.length === 16 ? value + \":00\" : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case \"time\":\r\n      return value.length === 5 ? value + \":00\" : value; // Convert hh:mm to hh:mm:00\r\n    case \"week\":\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return (\r\n    element instanceof HTMLSelectElement && element.type === \"select-multiple\"\r\n  );\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return (\r\n    !!element &&\r\n    element.tagName === \"INPUT\" &&\r\n    element.getAttribute(\"type\") === \"checkbox\"\r\n  );\r\n}\r\n"],"names":["Activatable","constructor","openDelay","closeDelay","dotNetHelper","this","clearDelay","clearTimeout","openTimeout","closeTimeout","runDelay","type","cb","delay","parseInt","setTimeout","isActive","open","close","setActive","active","invokeMethodAsync","activatorSelector","disabled","openOnClick","openOnHover","openOnFocus","super","activator","document","querySelector","resetActivator","selector","resetActivatorEvents","addActivatorEvents","activatorListeners","genActivatorListeners","keys","Object","key","addEventListener","listeners","mouseenter","e","mouseleave","click","event","focus","stopPropagation","detail","screenX","screenY","clientX","clientY","offsetX","offsetY","pageX","pageY","button","buttons","ctrlKey","shiftKey","altKey","metaKey","blur","removeActivatorEvents","removeEventListener","runDelaying","val","registerPopup","popupSelector","closeOnContentClick","popup","popupElement","addPopupEvents","console","error","popupListeners","genPopupListeners","removePopupEvents","resetPopupEvents","init","instance"],"mappings":"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"}