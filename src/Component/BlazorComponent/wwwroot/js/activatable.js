class t{constructor(t,e,s,i,o,n){this.activator=document.querySelector(t),this.disabled=e,this.openOnClick=s,this.openOnHover=i,this.openOnFocus=o,this.dotNetHelper=n}addActivatorEvents(){if(!this.activator||this.disabled)return;this.listeners=this.genActivatorListeners();const t=Object.keys(this.listeners);for(const e of t)this.activator.addEventListener(e,this.listeners[e])}genActivatorListeners(){if(this.disabled)return{};const t={};return this.openOnHover?(t.mouseenter=t=>{console.log("mouseenter"),this.runDelay("open")},t.mouseleave=t=>{console.log("mouseleave"),this.runDelay("close")}):this.openOnClick&&(t.click=t=>{this.activator&&this.activator.focus(),t.stopPropagation(),this.setActive(!this.isActive)}),this.openOnFocus&&(t.focus=t=>{t.stopPropagation(),this.setActive(!this.isActive)}),t}removeActivatorEvents(){if(!this.activator)return;const t=Object.keys(this.listeners);for(const e of t)this.activator.removeEventListener(e,this.listeners[e]);this.listeners={}}resetActivator(){this.removeActivatorEvents(),this.addActivatorEvents()}runDelay(t){this.setActive({open:!0,close:!1}[t])}setActive(t){this.isActive=t,this.dotNetHelper.invokeMethodAsync("SetActive",this.isActive)}}const e={};function s(s,i,o,n,r,c){const a=c._id;console.log("key",a,c);var v=new t(s,i,o,n,r,c);e[a]=v,v.addActivatorEvents()}function i(t){const s=t._id;e[s].resetActivator()}export{s as init,i as reset};
//# sourceMappingURL=activatable.js.map
