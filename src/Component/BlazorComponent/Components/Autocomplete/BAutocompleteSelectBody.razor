@namespace BlazorComponent
@inherits BDomComponentBase
@typeparam TItem

<AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
    @if (Items.Count == 0)
    {
        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItem>()" Link="@false">
            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemContent>()">
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemTitle>()">
                    No data available
                </AbstractComponent>
            </AbstractComponent>
        </AbstractComponent>
    }
    else
    {
        @for (var i = 0; i < Items.Count; i++)
        {
            var item = Items[i];
            var itemClass = i == HighlightIndex ? HighlightClass : string.Empty;
            if (EqualityComparer<TItem>.Default.Equals(item, SelectedItem) || (Multiple && SelectedItems.Contains(item)))
            {
                itemClass += SelectedClass;
            }
            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItem>()" Class="@itemClass" OnClick="@HandleClick(item)">
                @if (Multiple)
                {
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemAction>()">
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BCheckbox>()" Checked="@SelectedItems.Contains(item)"></AbstractComponent>
                    </AbstractComponent>
                }
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemContent>()">
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemTitle>()">
                        @{
                            var itemText = ItemText?.Invoke(item);
                            if (!string.IsNullOrEmpty(QueryText) && itemText.Contains(QueryText, StringComparison.OrdinalIgnoreCase) && QueryText.Length < itemText.Length)
                            {
                                var index = itemText.ToLower().IndexOf(QueryText.ToLower());
                                @itemText.Substring(0, index);
                                <span class="@CssProvider.GetClass("mask")">
                                    @itemText.Substring(index, QueryText.Length)
                                </span>
                                @itemText.Substring(index + QueryText.Length)
                            }
                            else
                            {
                                @itemText
                            }
                        }
                    </AbstractComponent>
                </AbstractComponent>
            </AbstractComponent>
        }
    }
</AbstractComponent>
