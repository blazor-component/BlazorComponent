@namespace BlazorComponent
@typeparam TValue
@typeparam TInput
@inherits BInputSlotBody<TInput>

@if (PrependInnerContent != default || PrependInnerIcon != null)
{
    <div class="@CssProvider.GetClass( "prepend-inner")">
        @PrependInnerContent
        @if (PrependInnerIcon != null)
        {
            //TODO:这里还需要进一步完善
            var name = "prepend-inner-icon";
            <div class="@CssProvider.GetClass("prepend-inner")">
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>(name)">
                    @PrependInnerIcon
                </AbstractComponent>
            </div>
        }
    </div>
}

@if (Outlined)
{
    <fieldset>
        <legend style="@CssProvider.GetStyle( "legend")">
            <span class="@CssProvider.GetStyle( "legend-span")">
                @((MarkupString)InnerHtml)
            </span>
        </legend>
    </fieldset>
}

<div class="@CssProvider.GetClass("text-field-slot")">
    @if (ShowLabel)
    {
        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BLabel>()">
            @if (LabelContent != null)
            {
                @LabelContent
            }
            else
            {
                @Label
            }
        </AbstractComponent>
    }

    @if (Prefix != null)
    {
        <div class="@CssProvider.GetClass("text-field-prefix")">
            @Prefix
        </div>
    }
    @*TODO:attrs*@
    <Element Tag="@InputTag" value="@Value" @onchange="HandleOnChange" autofocus="@Autofocus"
             disabled="@IsDisabled" placeholder="@Placeholder"
             readonly="@Readonly"
             @onblur="HandleOnBlur"
             @oninput="HandleOnInput"
             @onfocus="HandleOnFocus"
             @onkeydown="HandleOnKeyDown"
             @attributes="InputAttrs" />
    @*TODO:onresize*@
    @if (Suffix != null)
    {
        <div class="@CssProvider.GetClass("text-field-prefix")">
            @Suffix
        </div>
    }
</div>

@if (Clearable)
{
    <div class="@CssProvider.GetClass( "append-inner")">
        @if (!IsDirty)
        {
            <div></div>
        }
        else
        {
            //TODO:这里还需要进一步完善
            var name = "append-inner-icon";
            <div class="@CssProvider.GetClass("append-inner-icon-clear")">
                <AbstractComponent @onclick="HandleOnClear" Metadata="AbstractProvider.GetMetadata<BIcon>(name)">
                    @ClearIcon
                </AbstractComponent>
            </div>
        }
    </div>
}

@if (AppendContent != default || AppendIcon != null)
{
    <div class="@CssProvider.GetClass( "append-inner")">
        @AppendContent
        @if (AppendIcon != null)
        {
            //TODO:这里还需要进一步完善
            var name = "append-inner-icon";
            <div class="@CssProvider.GetClass("append-inner-icon")">
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>(name)">
                    @AppendIcon
                </AbstractComponent>
            </div>
        }
    </div>
}

@if (Loading != false)
{
    if (ProgressContent != null)
    {
        @ProgressContent
    }
    else
    {
        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BProcessLinear>()"></AbstractComponent>
    }
}

