@namespace BlazorComponent
@typeparam TItem
@typeparam TValue
@inherits BTextFieldSlotBody<TValue, ISelect<TItem, TValue>>

<CascadingValue Value="Input">
    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BMenu>()">
        <TAbstractContent TContext="MenuContext" Name="ActivatorContent">
            @{
                //Menu的设计需要改进
                Input.OnExtraClick = context.OnClick;
            }

            @if (Outlined)
            {
                <fieldset>
                    <legend style="@CssProvider.GetStyle( "legend")">
                        <span>@((MarkupString)"&#8203;")</span>
                    </legend>
                </fieldset>
            }

            <div class="@CssProvider.GetClass("select-slot")">
                @if (ShowLabel)
                {
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BLabel>()">
                        @if (LabelContent != null)
                        {
                            @LabelContent
                        }
                        else
                        {
                            @Label
                        }
                    </AbstractComponent>
                }

                <div class="@CssProvider.GetClass("selector")">
                    @if (Chips)
                    {
                        foreach (var item in Text)
                        {
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BChip>()">@item</AbstractComponent>
                        }
                    }
                    else
                    {
                        for (var i = 0; i < Text.Count(); i++)
                        {
                            var item = Text.ElementAt(i);
                            if (i == Text.Count() - 1)
                            {
                                <div class="@CssProvider.GetClass("selected")">@item</div>
                            }
                            else
                            {
                                <div class="@CssProvider.GetClass("selected")">@($"{item}, ")</div>
                            }
                        }

                    }
                    <input type="text"
                           @onchange="HandleOnChange" autofocus="@Autofocus"
                           disabled="@IsDisabled" placeholder="@Placeholder"
                           readonly
                           @onblur="HandleOnBlur"
                           @oninput="HandleOnInput"
                           @onfocus="HandleOnFocus"
                           @onkeydown="HandleOnKeyDown"
                           @ref="InputRef"
                           class="@CssProvider.GetClass("select-input")" />
                </div>
                <div class="@CssProvider.GetClass("select-arrow")">
                    <div class="@CssProvider.GetClass("select-arrow-icon")">
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>()">
                            @Icon
                        </AbstractComponent>
                    </div>
                </div>
                <input type="hidden" value="@(Multiple ? string.Join(',', Values) : Value)" />
            </div>

            @if (Loading != false)
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BProcessLinear>()"></AbstractComponent>
            }
        </TAbstractContent>
        <AbstractContent Name="ChildContent">
            <CascadingValue Value="this">
                @if (Items.Any())
                {
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                        @foreach (var item in Items)
                        {
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BSelectOption<TItem, TValue>>()"
                                               Item="@item"
                                               Value="@ItemValue(item)"
                                               Label="@ItemText(item)"
                                               Disabled="@ItemDisabled(item)"
                                               key="@ItemValue(item).ToString()" />
                        }
                    </AbstractComponent>
                }
                else
                {
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                        @InputChildContent
                    </AbstractComponent>
                }
            </CascadingValue>
        </AbstractContent>
    </AbstractComponent>
</CascadingValue>

