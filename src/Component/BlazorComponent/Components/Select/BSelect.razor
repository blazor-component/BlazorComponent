@namespace BlazorComponent
@inherits BDomComponentBase
@typeparam TItem
@typeparam TValue

<div class="@CssProvider.GetClass()" style="@CssProvider.GetStyle()" id="@Id">
    <div class="@CssProvider.GetClass("control")">
        <div class="@CssProvider.GetClass("slot")"
             @onclick="Click"
             @ref="Ref"
             tabindex="0"
             style="outline:none"
             @onblur="HandleOnBlur">

            @if (Outlined)
            {
                <fieldset>
                    <legend style="@LegendStyle">
                        <span>@((MarkupString)"&#8203;")</span>
                    </legend>
                </fieldset>
            }

            <div class="@CssProvider.GetClass("select-slot")">
                @if (!string.IsNullOrWhiteSpace(Label))
                {
                    if (!Solo || Solo && !_text.Any())
                    {
                        <label class="@CssProvider.GetClass("label")" style="@CssProvider.GetStyle("label")">@Label</label>
                    }
                }
                <div class="@CssProvider.GetClass("selector")">
                    @if (Chips)
                    {
                        @foreach (var item in _text)
                        {
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BChip>()">@item</AbstractComponent>
                        }
                    }
                    else
                    {
                        @for (var i = 0; i < _text.Count(); i++)
                        {
                            var item = _text.ElementAt(i);
                            if (i == _text.Count() - 1)
                            {
                                <div class="@CssProvider.GetClass("selected")">@item</div>
                            }
                            else
                            {
                                <div class="@CssProvider.GetClass("selected")">@($"{item}, ")</div>
                            }
                        }
                    }
                    <input id="input-@Id" type="text" readonly="readonly"
                           class="@CssProvider.GetClass("select-input")" />
                </div>
                <div class="@CssProvider.GetClass("select-arrow")">
                    <div class="@CssProvider.GetClass("select-arrow-icon")">
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>()">
                            @_icon
                        </AbstractComponent>
                    </div>
                </div>
                <input type="hidden" value="@(Multiple ? string.Join(',', Values) : Value)" />
            </div>
        </div>

        @if (!Slot)
        {
            <div class="@CssProvider.GetClass("hint")">
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BHitMessage>()">@Hint</AbstractComponent>
            </div>
        }
    </div>
</div>

<AbstractComponent Metadata="AbstractProvider.GetMetadata<BOverlay>()" />

<CascadingValue Value="this">
    <div @ref="PopoverRef">
        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BPopover>()">
            @if (Slot)
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BSelectSlot>()"></AbstractComponent>
            }
            else if (Items.Any())
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemGroup>()">
                        @foreach (var item in Items)
                        {
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BSelectOption<TItem, TValue>>()"
                                   Item="@item"
                                   Value="@ItemValue(item)"
                                   Label="@ItemText(item)"
                                   key="@ItemValue(item).ToString()" />
                        }
                    </AbstractComponent>
                </AbstractComponent>
            }
            else
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemGroup>()">
                        @ChildContent
                    </AbstractComponent>
                </AbstractComponent>
            }
        </AbstractComponent>
    </div>
</CascadingValue>