@namespace BlazorComponent
@inherits BDomComponentBase
@typeparam TItem
@typeparam TValue

<AbstractComponent Metadata="AbstractProvider.GetMetadata<BMenu>()">
    <AbstractContent Name="Activator">
        <div class="@CssProvider.GetClass()" style="@CssProvider.GetStyle()" id="@Id">
            <div class="@CssProvider.GetClass("control")">
                <div class="@CssProvider.GetClass("slot")"
                     @onclick="Click"
                     @ref="Ref"
                     tabindex="0"
                     style="outline:none"
                     @onblur="HandleOnBlur">

                    @if (Outlined)
                    {
                        <fieldset>
                            <legend style="@LegendStyle">
                                <span>@((MarkupString)"&#8203;")</span>
                            </legend>
                        </fieldset>
                    }

                    <div class="@CssProvider.GetClass("select-slot")" @ref="SelectSoltRef">
                        @if (!string.IsNullOrWhiteSpace(Label))
                        {
                            if (!Solo || Solo && !_text.Any())
                            {
                                <label class="@CssProvider.GetClass("label")" style="@CssProvider.GetStyle("label")">@Label</label>
                            }
                        }
                        <div class="@CssProvider.GetClass("selector")">
                            @if (!IsAutocomplete || Multiple)
                            {
                                if (Chips)
                                {
                                    foreach (var item in _text)
                                    {
                                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BChip>()">@item</AbstractComponent>
                                    }
                                }
                                else
                                {
                                    for (var i = 0; i < _text.Count(); i++)
                                    {
                                        var item = _text.ElementAt(i);
                                        if (i == _text.Count() - 1)
                                        {
                                            <div class="@CssProvider.GetClass("selected")">@item</div>
                                        }
                                        else
                                        {
                                            <div class="@CssProvider.GetClass("selected")">@($"{item}, ")</div>
                                        }
                                    }

                                }
                            }
                            @if (IsAutocomplete)
                            {
                                <input type="text" autocomplete="off" @ref="InputRef"
                                   value="@ValueText"
                                   @onblur="HandleOnBlur"
                                   @onblur:stopPropagation
                                   @oninput="EventCallback.Factory.Create<ChangeEventArgs>(BodyRef,HandleOnInputAsync)"
                                   @onkeydown="EventCallback.Factory.Create<KeyboardEventArgs>(BodyRef,HandleOnKeyDownAsync)" />
                            }
                            else
                            {
                                <input id="input-@Id" type="text" readonly="readonly"
                                   class="@CssProvider.GetClass("select-input")" />
                            }
                        </div>
                        <div class="@CssProvider.GetClass("select-arrow")">
                            <div class="@CssProvider.GetClass("select-arrow-icon")">
                                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>()">
                                    @_icon
                                </AbstractComponent>
                            </div>
                        </div>
                        <input type="hidden" value="@(Multiple ? string.Join(',', Values) : Value)" />
                    </div>
                    @if (Loading)
                    {
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BProcessLinear>()"></AbstractComponent>
                    }
                </div>

                @if (PersistentHint || !string.IsNullOrEmpty(Hint))
                {
                    <div class="@CssProvider.GetClass("hint")">
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BHintMessage>()">@Hint</AbstractComponent>
                    </div>
                }
            </div>
        </div>
    </AbstractContent>
    <AbstractContent Name="ChildContent">
        <CascadingValue Value="this">
            @if (HasBody)
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<ISelectBody>()" @ref="BodyRef"></AbstractComponent>
            }
            else if (Items.Any())
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                    @foreach (var item in Items)
                    {
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BSelectOption<TItem, TValue>>()"
                                   Item="@item"
                                   Value="@ItemValue(item)"
                                   Label="@ItemText(item)"
                                   Disabled="@ItemDisabled(item)"
                                   key="@ItemValue(item).ToString()" />
                    }
                </AbstractComponent>
            }
            else
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
                    @ChildContent
                </AbstractComponent>
            }
        </CascadingValue>
    </AbstractContent>
</AbstractComponent>