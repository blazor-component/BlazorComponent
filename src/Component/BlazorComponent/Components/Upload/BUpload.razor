@namespace BlazorComponent
@using Microsoft.AspNetCore.Components.Forms
@inherits BDomComponentBase

<InputFile @ref="_uploadElementReference"
           OnChange="HandleOnChange"
           multiple="@Multiple"
           accept="@Accept"
           hidden />

<div class="@CssProvider.GetClass()" style="@CssProvider.GetStyle()"
     @onclick="HandleOnClick">
    @Activator
</div>

@if (ShowUploadList)
{
    if (Chips)
    {
        <div class="@CssProvider.GetClass("chips-wrapper")" style="@CssProvider.GetStyle("chips-wrapper")">
            @foreach (var file in Files)
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BTooltip>()" Top
                   Disabled="@string.IsNullOrEmpty(file.Error)">
                    <AbstractContent Name="Activator">
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BChip>()"
                           Close
                           CloseIconColor="@(file.Uploaded ? "" : "red")"
                           Click="@(EventCallback.Factory.Create<MouseEventArgs>(this, () => Files.Remove(file)))">
                            @if (file.IsImage)
                            {
                                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BAvatar>()" Tile>
                                    <img src="@file.Url" alt="@file.FormatedFileName">
                                </AbstractComponent>
                            }

                            <span class="@GetColorCss(file.Uploaded)">
                                @file.FormatedFileName@(ShowSize && file.BrowserFile != null ? $"({FormatSize(file.BrowserFile.Size)})" : "")
                            </span>
                        </AbstractComponent>
                    </AbstractContent>
                    <AbstractContent Name="ChildContent">
                        @file.Error
                    </AbstractContent>
                </AbstractComponent>
            }
        </div>
    }
    else
    {
        <AbstractComponent Metadata="AbstractProvider.GetMetadata<BList>()">
            @foreach (var file in Files)
            {
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BTooltip>()" Top
                   Disabled="@string.IsNullOrEmpty(file.Error)"
                   ActivatorStyle="display:block">
                    <AbstractContent Name="Slots.Activator">
                        <div style="@GetListItemStyle(file.Uploaded)">
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItem>()">
                                @if (file.IsImage)
                                {
                                    <AbstractComponent Metadata="@(AbstractProvider.GetMetadata<BAvatar>("list-item"))" Tile>
                                        <img src="@file.Url" alt="@file.FormatedFileName">
                                    </AbstractComponent>
                                }
                                else
                                {
                                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemIcon>()">
                                        <AbstractComponent Metadata="@(AbstractProvider.GetMetadata<BIcon>())"
                                       Small Color="@(file.Uploaded ? "" : "red")">
                                            mdi-paperclip
                                        </AbstractComponent>
                                    </AbstractComponent>
                                }
                                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemContent>()">
                                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemTitle>()" Class="@GetColorCss(file.Uploaded)">
                                        @file.FormatedFileName@(ShowSize && file.BrowserFile != null ? $"({FormatSize(file.BrowserFile.Size)})" : "")
                                    </AbstractComponent>
                                </AbstractComponent>
                                <AbstractComponent Metadata="AbstractProvider.GetMetadata<BListItemAction>()">
                                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BButton>()"
                                       Icon
                                       Color="@(file.Uploaded ? "" : "red")"
                                       Click="@(EventCallback.Factory.Create<MouseEventArgs>(this, () => Files.Remove(file)))">
                                        <AbstractComponent Metadata="@(AbstractProvider.GetMetadata<BIcon>())"
                                           Small>
                                            mdi-close
                                        </AbstractComponent>
                                    </AbstractComponent>
                                </AbstractComponent>
                            </AbstractComponent>
                        </div>
                    </AbstractContent>
                    <AbstractContent Name="Slots.ChildContent">
                        @file.Error
                    </AbstractContent>
                </AbstractComponent>
            }
        </AbstractComponent>
    }
}

@ChildContent

@if (Counter && Files.Any())
{
    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BHitMessage>()">
        @Files.Count files
    </AbstractComponent>
}
