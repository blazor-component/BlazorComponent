@namespace BlazorComponent
@inherits BDomComponentBase
@typeparam TItem
@typeparam TValue

<div class="@CssProvider.GetClass()">
    <div class="@CssProvider.GetClass("wrapper")" style="@CssProvider.GetStyle("wrapper")">
        <BList @attributes="@GetAttributes(typeof(BList))">
            @foreach (var item in Items)
            {
                var children = ItemChildren(item);
                <BListItem @onmousedown:preventDefault OnClick="() => SelectItemAsync(item)"
                           @attributes="@GetAttributes(typeof(BListItem), data: item)">
                    <BListItemContent @attributes="@GetAttributes(typeof(BListItemContent))">
                        <BListItemTitle>
                            @ItemText(item)
                        </BListItemTitle>
                    </BListItemContent>
                    <BListItemIcon>
                        @if (EqualityComparer<TItem>.Default.Equals(LoadingItem, item))
                        {
                            <BProgressCircular @attributes="@GetAttributes(typeof(BProgressCircular))"></BProgressCircular>
                        }
                        else if (children != null && children.Count > 0)
                        {
                            <BIcon>
                                @Icon
                            </BIcon>
                        }
                    </BListItemIcon>

                </BListItem>
            }
        </BList>
    </div>
</div>

@if (HasChildren)
{
    <BCascaderList @key="SelectedItem" TItem="TItem" TValue="TValue" Items="Children"
                   @attributes="@GetAttributes(typeof(BCascaderList<,>))"
                   @ref="NextCascaderList">
    </BCascaderList>
}
